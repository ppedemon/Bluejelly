module Simple(Simple.f,Simple.Either(Simple.Left,Simple.Right)) where

import bluejelly.Prelude
import bluejelly.Types
import bluejelly.List
import bluejelly.Int

infixl 5 ++,$$,**
infixr 6 &&&,^^^

f,g :: forall a. (Eq a, Ord a) => (a -> Int) -> ([String],Char) -> (Int,Int)

data Int
data Char
data Double

data Eq a => Either a b = forall a. Left a | Ord b => Right b

data Person = Manager {name::String, org::String, people::[Person]} 
            | Employee {name:: !String, manager::Person}

-- Wtf?
data Monad m => M m = Functor m => M { x :: forall a. Eq a => m a -> a }

class Functor m where
  map :: (a -> b) -> m a -> m b

class Functor m => Monad m where
  return :: a -> m a
  (>>=) :: m a -> (a -> m b) -> m b

class Eq a where
  (==),(/=) :: a -> a -> Bool
  x /= y = not (x == y)

class Container c a | c -> a where
  empty :: c
  insert :: a -> c -> c
  contains :: a -> c -> Bool

type Set a = [a]
type Point = (Int,Int)
 
instance Eq Int where 
  x == y = bluejelly.Int.eq x y

instance (Eq a,Eq b) => Eq (a,b) where 
  (u,v) == (x,y) = u == x && v == y

instance (Eq a, Eq [a]) => Eq [a]

instance (Eq a,Eq b) => Eq (a->b)

instance MultiParam a Int [b]

data X a = X [a]
