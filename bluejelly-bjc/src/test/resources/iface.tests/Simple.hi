module Simple(f,Either(A,B)) where

f,g :: Int -> Int

data Eq a => Either a b = forall a. Left a | Ord b => Right b

data Person = Manager {name::String, org::String, people::[Person]} 
            | Employee {name:: !String, manager::Person}

-- Wtf?
data Monad m => M m = Functor m => M { x :: forall a. Eq a => m a -> a }
