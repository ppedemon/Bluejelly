module Test

data Nil{0,0}
data Cons{1,2}

data False{0,0}
data True{1,0}

extern 
  bluejelly.Int.div{2},
  bluejelly.Int.add{2}, 
  bluejelly.Int.sub{2},
  bluejelly.Int.neg{1},
  bluejelly.Int.neq{2},
  bluejelly.Int.eq{2},
  bluejelly.Int.or{2}

# ------------------------------------------------------------------------
# Simple stuff
# ------------------------------------------------------------------------

fun id x = x
fun const x y = x
fun third w x y z = y

fun testId = id 1
fun testConst = const (id 1) (bluejelly.Int.div 1 0)

# Functions have to be eta-expanded
fun inc x = bluejelly.Int.add 1 x
fun dec x = bluejelly.Int.sub x 1

fun weirdAdd x =
  let y = inc x in
  let x = bluejelly.Int.add 1 1 in
  bluejelly.Int.add y (bluejelly.Int.add x x)

fun testWeirdAdd = weirdAdd 1

fun weirdId x = let x = x in x
fun testWeirdId = weirdId "weird!"

fun if p x y = let! p = p in match p with True -> x | False -> y

fun recursive n = 
  let rec x = dec y
      and y = if (bluejelly.Int.eq n 0) 1 (recursive (dec n))
  in x
  
fun testRecursive = recursive (inc 1)

fun addProxy x y = 
  let! x$ = x in
  let! y$ = y in
  bluejelly.Int.add x$ y$

fun testAddProxy = addProxy 1 (-1)

# ------------------------------------------------------------------------
# Test matches
# ------------------------------------------------------------------------

fun intMatch x = let! x = x in match x with 1 -> 1 | 2 -> 2 | z -> 0
fun testIntMatch = intMatch (nestedEval 1 (-1))
fun testIntMatchDef = intMatch (nestedEval -10 1)

# ------------------------------------------------------------------------
# Contrived stuff
# ------------------------------------------------------------------------

fun add x y = bluejelly.Int.add x y
fun neg x = bluejelly.Int.neg x

fun noInline x y = 
  let! f =
    let! k = id const in 
    let! n = neg 1 in 
    third n n k 1 
  in
  let v = bluejelly.Int.add x y in
  let w = Cons 1 Nil in 
  f v w

fun testNoInline = noInline 3 4

fun lazyAlias =
  let add = bluejelly.Int.add in
  let! x = 1
  in add (add 1 1) 1

# This inlines to:
#   fun f x = 
#     const (bluejelly.Int.add 1 (let! z = bluejelly.Int.add x 1 in z)) 20
fun strictInline x = 
  let! z = bluejelly.Int.add x 1 in
  let w = bluejelly.Int.add 1 z in 
  const w 20 

fun testStrictInline = strictInline 8

fun nestedEval x y = 
  let! u = 
    let! v = bluejelly.Int.add x y in bluejelly.Int.add v 1
  in bluejelly.Int.add u 1

fun testNestedEval = nestedEval 1 2

fun fishy x = 
  let! ev = inc x 
  in match ev with
    | 1 -> 
      let! u = let! v = bluejelly.Int.add x x in bluejelly.Int.add v 1 in 
      bluejelly.Int.add u 1
    | y -> 2

fun testFishy0 = fishy 0
fun testFishyDef = fishy 20

fun xs = weirdId (Cons 1 (Cons 2 (Cons 3 Nil)))

fun nestedMatch = 
  let! y =
    let! z = xs in
    match z with
      | Nil -> Nil
      | Cons x y -> let s = bluejelly.Int.add x 1 in Cons s y
  in match y with
    | Nil -> 0
    | Cons z y -> z

# -----------------------------------------------------------------------
# Some real code
# -----------------------------------------------------------------------
 
fun comp f g x = f (g x)
 
fun and$ x y = 
  let! x = x in
  match x with
    | False -> False
    | True -> y
 
fun or$ x y = 
  let! x = x in
  match x with
    | True -> True
    | False -> y
 
 # isEven & isOdd, mutually recursive and unnecessarily complex
 fun isEven x = or$ (bluejelly.Int.eq x 0) (let f = comp isOdd dec in f x)
 fun isOdd x = and$ (bluejelly.Int.neq x 0) (let f = comp isEven dec in f x)
 
 fun testEven = isEven 100
 fun testOdd = isOdd 251
 fun testEvenFalse = isEven 251
 fun testOddFalse = isOdd 100
 
 extern 
   bluejelly.BigInt.one{1}, 
   bluejelly.BigInt.fromInt{1},
   bluejelly.BigInt.mul{2}
 
 # Factorial function, of course (not tail recursive)
 fun fact n = 
   let! n = n in
   match n with
     | 0 -> bluejelly.BigInt.one
     | n -> let b = @bluejelly.BigInt.fromInt n in
            bluejelly.BigInt.mul b (@fact (@bluejelly.Int.sub n 1))

fun testFact = fact 100
