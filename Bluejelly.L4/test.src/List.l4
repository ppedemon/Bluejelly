module List

data False{0,0}
data True{1,0}

data Nil{0,0}
data Cons{1,2}

extern 
  bluejelly.Int.add{2}, 
  bluejelly.Int.sub{2},
  bluejelly.Int.rem{2},
  bluejelly.Int.neq{2},
  bluejelly.Int.eq{2}

extern 
  bluejelly.BigInt.zero{1},
  bluejelly.BigInt.one{1},
  bluejelly.BigInt.add{2}

# ------------------------------------------------------------------------
# Misc stuff
# ------------------------------------------------------------------------

fun inc x = bluejelly.Int.add 1 x
fun even x = bluejelly.Int.eq (bluejelly.Int.rem x 2) 0
fun flip f x y = f y x

# ------------------------------------------------------------------------
# List stuff we all love
# ------------------------------------------------------------------------

fun enum x = Cons x (@enum (bluejelly.Int.add x 1))

fun map f xs = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> Nil
    | Cons x xs -> Cons (f x) (@map f xs)

fun filter p xs = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> Nil
    | Cons x xs -> 
      let! b = @p x in
      match b with
        | False -> @filter p xs
        | True -> Cons x (@filter p xs)

fun take n xs = 
  let! n$ = n in
  match n$ with
    | 0 -> Nil
    | n -> let! xs$ = xs in
         match xs$ with
           | Nil -> Nil
           | Cons x xs -> Cons x (@take (@bluejelly.Int.sub n 1) xs)

fun foldr f a xs = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> a
    | Cons x xs -> f x (foldr f a xs)

fun foldl f a xs = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> a
    | Cons x xs -> foldl f (f a x) xs

fun append xs ys = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)

fun testTake = take 10 (enum 1)

fun testMap = map inc (take 100 (enum 1))
fun testFilter = filter even testMap

fun testAppend = 
  List.append (List.take 10 (List.enum 1)) (List.take 20 (List.enum 1))

fun sumr xs = foldr bluejelly.Int.add 0 xs
fun suml xs = foldl bluejelly.Int.add 0 xs

fun testSumr = sumr (take 10 (enum 1))
fun testSuml = suml (take 10 (enum 1))

fun cons x y = Cons x y
fun reverse xs = foldl (flip cons) Nil xs 

fun testReverse = reverse (take 20 (enum 1))

# ------------------------------------------------------------------------
#  Trail-division lazy primes list
# ------------------------------------------------------------------------

fun prims = sieve (enum 2)
    
fun sieve xs = 
  let! xs$ = xs in
  match xs$ with
    | Cons x xs -> Cons x (@sieve (@List.filter (@notMultipleOf x) xs))
    
fun notMultipleOf x y = bluejelly.Int.neq (bluejelly.Int.rem y x) 0

fun testPrims = List.take 100 List.prims

# ------------------------------------------------------------------------
# Infinite Fibonacci list
# ------------------------------------------------------------------------

fun fibs = fibAux bluejelly.BigInt.zero bluejelly.BigInt.one

fun fibAux x y = Cons x (fibAux y (bluejelly.BigInt.add x y))

fun testFib = take 200 fibs
