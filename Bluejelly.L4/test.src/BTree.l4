module BTree

data False{0,0}
data True{1,0}

data List.Nil{0,0}
data List.Cons{1,2}

data Empty{0,0}
data Node{1,3}

extern 
  bluejelly.Int.lt{2},
  bluejelly.Int.gt{2}, 
  bluejelly.Int.eq{2},
  bluejelly.Int.add{2}

extern List.append{2}, List.foldr{3}, List.foldl{3}, List.map{2}
extern List.flip{3}

fun empty = Empty

fun insert t x = 
  let! t$ = t in
  match t$ with
    | Empty -> Node x Empty Empty
    | Node n t1 t2 -> 
      let! lt = bluejelly.Int.lt x n in
      match lt with
        | True -> Node n (insert t1 x) t2
        | False ->
          let! eq = bluejelly.Int.eq x n in
          match eq with
            | True -> t$
            | False -> Node n t1 (insert t2 x)

fun inOrder t =
  let t$ = t in
  match t$ with
    | Empty -> List.Nil
    | Node n t1 t2 -> List.append (inOrder t1) (List.Cons n (inOrder t2))

fun max x y = 
  let! a = bluejelly.Int.gt x y in
  match a with True -> x | False -> y

fun depth t = 
  let! t$ = t in
  match t$ with
    | Empty -> 0
    | Node x t1 t2 ->
      let d1 = depth t1 in
      let d2 = depth t2 in
      bluejelly.Int.add 1 (max d1 d2)

fun xs 
 = List.Cons 4 
 ( List.Cons 0 
 ( List.Cons 1 
 ( List.Cons 7 
 ( List.Cons 6 
 ( List.Cons 3 
 ( List.Cons 5 
 ( List.Cons 2 
 ( List.Cons 9 
 ( List.Cons 8 List.Nil)))))))))

fun testInsertr = List.foldr (List.flip BTree.insert) BTree.empty BTree.xs
fun testInsertl = List.foldl insert empty xs
fun testInOrderR = inOrder BTree.testInsertr
fun testInOrderL = inOrder BTree.testInsertl
fun testDepth = depth testInsertr

fun inc x = bluejelly.Int.add x 1

fun torture =
  let! x = 
    let! y = testInsertr in 
    let! xs = inOrder y in
    match xs with
      | List.Nil -> xs
      | List.Cons x xs -> let! ys = List.map inc xs in List.Cons x ys 
  in
    List.append x xs

