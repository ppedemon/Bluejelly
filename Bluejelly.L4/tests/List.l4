module List

data False{0,0}
data True{1,0}

data Nil{0,0}
data Cons{1,2}

extern Test.enum{1},Test.take{2}
extern bluejelly.Int.add{2}, bluejelly.Int.sub{2}

fun enum x = Cons x (@enum (bluejelly.Int.add x 1))

fun map f xs = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> Nil
    | Cons x xs -> Cons (f x) (@map f xs)

fun filter p xs = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> Nil
    | Cons x xs -> 
      let! b = @p x in
      match b with
        | False -> @filter p xs
        | True -> Cons x (@filter p xs)

fun take n xs = 
  let! n$ = n in
  match n$ with
    | 0 -> Nil
    | n -> let! xs$ = xs in
         match xs$ with
           | Nil -> Nil
           | Cons x xs -> Cons x (@take (@bluejelly.Int.sub n 1) xs)

fun foldr f a xs = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> a
    | Cons x xs -> f x (foldr f a xs)

fun foldl f a xs = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> a
    | Cons x xs -> foldl f (f a x) xs

fun append xs ys = 
  let! xs$ = xs in
  match xs$ with
    | Nil -> ys
    | Cons x xs -> Cons x (append xs ys)

fun testAppend = append (Test.take 10 (Test.enum 1)) (Test.take 20 (Test.enum 1))
