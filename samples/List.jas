.module List:

# Some list goodies

# take 0 _ = []
# take _ [] = []
# take n (x:xs) = x: take (n-1) xs
.fun take[arity=2]:
  stack 1
  evalvar 0,take$1
.end

.fun take$1[matcher]:
  matchint
  .case 0:
    stack 1
    slide 0,2
    retcon 0,0
  .default:
    stack 1
    evalvar 2,take$2
  .end
.end

.fun take$2[matcher]:
  matchcon
  .case 0:
    stack 1
    slide 0,3
    retcon 0,0
  .case 1:
    stack 4
    pushvar 1
    pushint 1
    pushvar 5
    pushcode bluejelly.Int.sub
    mkapp 3
    pushcode take
    mknapp 3 #mkapp?
    pushvar 1
    slide 2,5
    retcon 1,2
  .end
.end

# Integral enum 
# enum x = x:enum (x+1)
.fun enumFromInt[arity=1]:
  stack 3
  pushint 1
  pushvar 1
  pushcode bluejelly.Int.add
  mkapp 3
  pushcode enumFromInt
  mknapp 2 #mkapp?
  pushvar 1
  slide 2,1
  retcon 1,2
.end

# filter _ [] = []
# filter p (x:xs) 
#  | p x = x:filter p xs
#  | otherwise = filter p xs
.fun filter[arity=2]:
  stack 1
  evalvar 1,filter$1
.end

.fun filter$1[matcher]:
  matchcon
  .case 0:
    stack 1 
    slide 0,2
    retcon 0,0
  .case 1:
    stack 2
    pushcont filter$2
    pushvar 0
    pushvar 3
    enter
  .end
.end

.fun filter$2[matcher]:
  matchcon
  .case 0:
    stack 3
    pushvar 1
    pushvar 3
    slide 2,4
    jmp filter
  .case 1:
    stack 3
    pushvar 1
    pushvar 3
    pushcode filter
    mknapp 3 # Using nknapp instead of nkapp here makes a world of difference
    pushvar 1
    slide 2,4
    retcon 1,2
  .end
.end

.fun test:
  stack 2
  pushint 2
  pushcode enumFromInt
  mkapp 2
  pushint 10
  jmp take
.end

.fun even[arity=1]:
  stack 4
  pushint 0
  pushint 2
  pushvar 2
  pushcode bluejelly.Int.rem
  mkapp 3
  pushcode bluejelly.Int.eq
  mkapp 3
  slide 1,1
  enter
.end

.fun filterTest:
  stack 2
  pushcode test
  pushcode even
  jmp filter
.end

.fun enumTest:
  stack 2
  pushint 2
  jmp enumFromInt
.end

.end
