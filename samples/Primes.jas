.module Primes:

# Erathostenes sieve
#  primes = sieve [2..]
#    where sieve (x:xs) = x : sieve (filter (\y -> y `mod` x /= 0) xs)
.fun primes:
  stack 2
  pushint 2
  pushcode List.enumFromInt
  mknapp 2 #mkapp?
  jmp sieve  
.end

.fun sieve[arity=1]:
  stack 1
  evalvar 0,sieve$1
.end

.fun sieve$1$f[arity=2]:
  stack 4
  pushint 0
  pushvar 1
  pushvar 3
  pushcode bluejelly.Int.rem
  mknapp 3 #mkapp?
  slide 2,2
  jmp bluejelly.Int.neq
.end

.fun sieve$1[matcher]:
  matchcon
  .case 1:
    stack 3
    pushvar 1
    pushvar 1
    pushcode sieve$1$f
    mknapp 2 
    pushcode List.filter
    mknapp 3 #mkapp?
    pushcode sieve
    mknapp 2 #mknapp? 
    pushvar 1
    slide 2,3
    retcon 1,2
  .end
.end

# First 50 primes
.fun primesList:
  stack 2
  pushcode primes
  pushint 10000
  jmp List.take
.end

.end
